/*apply plugin: 'com.android.application'
apply plugin: 'com.xiaojinzi.component.plugin'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'*/

plugins {
    id 'com.android.application'
    id 'com.xiaojinzi.kcomponent.plugin'
    id 'com.xiaojinzi.kcomponent.plugin2'
    id 'kotlin-android'
    id 'com.google.devtools.ksp'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
}

apply from: "../demo_module.gradle"

ksp {
    arg("ModuleName", "app")
}

/*kotlin {
    sourceSets.main {
        kotlin.srcDir("build/generated/ksp/main/kotlin")
    }
}*/

android {
    namespace 'com.xiaojinzi.component.demo'

    signingConfigs {
        debug {
            storeFile file('./sign')
            storePassword "xiaojinzi"
            keyAlias "xiaojinzi"
            keyPassword "xiaojinzi"
        }
        release {
            storeFile file('./sign')
            storePassword "xiaojinzi"
            keyAlias "xiaojinzi"
            keyPassword "xiaojinzi"
        }
    }

    buildTypes {
        debug {
            minifyEnabled = false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            if (Boolean.parseBoolean(project.findProperty("support.isIncludeKspFolder"))) {
                kotlin {
                    sourceSets {
                        android.applicationVariants.all { variant ->
                            def variantName = variant.getName()
                            if(variantName.toLowerCase(Locale.getDefault()).endsWith("debug")) {
                                debug.kotlin.srcDirs("build/generated/ksp/" + variantName +"/kotlin")
                            }
                        }
                    }
                }
            }
        }
        release {
            minifyEnabled true
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions 'env', "leakcanary", "simulatorCheck"

    productFlavors {
        product {
            dimension 'env'
        }
        dev {
            dimension 'env'
        }

        leakcanary1 {
            dimension 'leakcanary'
        }
        leakcanary0 {
            dimension 'leakcanary'
        }

        simulatorCheck1 {
            dimension 'simulatorCheck'
        }
        simulatorCheck0 {
            dimension 'simulatorCheck'
        }
    }

}

dependencies {
    api project(':Demo:module-support')
    api project(':Demo:module-user')
    api project(':Demo:module-base')
}
